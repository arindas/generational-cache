var searchIndex = JSON.parse('{\
"generational_cache":{"doc":"Usage","t":"AAAAAADEENDNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMMNIQENENNNLLLLKKLLLLLLKLLLLKAKKKKLLLLLLMMDNDGENNNNNNLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLMMMANNDDNDGNEDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMQIKKKKAKKKKADLLLLLLLLLLLLLLLLLLCCCCCCCCCCCCCCCCQIKKAKKAADLLLLLLLLLLLLLLLLDENLLLLLLLLLLLLLLLLLLLLLLLLL","n":["arena","cache","collections","map","prelude","vector","Arena","ArenaError","Entry","Free","Index","InvalidIdx","Occupied","OutOfMemory","Unmapped","VectorError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","generation","get","get_mut","idx","insert","into","into","into","into","is_empty","len","remove","reserve","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_vector","generation","next_free_idx","value","Block","Cache","Error","Eviction","Hit","Lookup","Miss","None","Value","borrow","borrow","borrow_mut","borrow_mut","capacity","clear","eq","eq","fmt","fmt","from","from","insert","into","into","is_empty","is_maxed","len","lru_cache","query","remove","reserve","shrink","try_from","try_from","try_into","try_into","type_id","type_id","key","value","Block","Free","LRUCache","LRUCacheBlockArenaEntry","LRUCacheError","ListError","ListUnderflow","MapError","MapListInconsistent","Occupied","Unmapped","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","default","fmt","fmt","from","from","from","insert","into","into","into","is_empty","key","least_recent","len","most_recent","query","remove","reserve","shrink","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","with_backing_vector","with_backing_vector_and_map","generation","next_free_idx","value","list","ArenaError","Free","Iter","Link","LinkBroken","LinkedList","LinkedListArenaEntry","ListEmpty","ListError","Node","Occupied","Unmapped","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","get","get_mut","index","into","into","into","into","into","into_iter","into_iter","is_empty","iter","len","next","next","peek_back","peek_front","pop_back","pop_front","prev","push_back","push_front","remove","reserve","shift_push_back","shift_push_front","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unlink","value","with_backing_vector","with_value","generation","next_free_idx","value","Error","Map","capacity","clear","get","get_mut","impls","insert","is_empty","len","remove","alloc_btree_map","AllocBTreeMap","borrow","borrow_mut","capacity","clear","default","from","get","get_mut","insert","into","is_empty","len","new","remove","try_from","try_into","type_id","with_btree_map","AllocBTreeMap","AllocVec","Arena","ArenaError","Array","ArrayError","Cache","Eviction","LRUCache","LRUCacheError","Link","LinkedList","ListError","Lookup","Map","Vector","Error","Vector","capacity","clear","impls","push","reserve","alloc_vec","array","AllocVec","borrow","borrow_mut","capacity","clear","default","deref","deref_mut","from","into","new","push","reserve","try_from","try_into","type_id","with_capacity","Array","ArrayError","OutOfMemory","borrow","borrow","borrow_mut","borrow_mut","capacity","clear","default","deref","deref_mut","eq","fmt","from","from","into","into","new","push","reserve","try_from","try_from","try_into","try_into","type_id","type_id","with_buffer"],"q":[[0,"generational_cache"],[6,"generational_cache::arena"],[70,"generational_cache::arena::Entry"],[73,"generational_cache::cache"],[111,"generational_cache::cache::Eviction"],[113,"generational_cache::cache::lru_cache"],[167,"generational_cache::cache::lru_cache::LRUCacheBlockArenaEntry"],[170,"generational_cache::collections"],[171,"generational_cache::collections::list"],[260,"generational_cache::collections::list::LinkedListArenaEntry"],[263,"generational_cache::map"],[274,"generational_cache::map::impls"],[275,"generational_cache::map::impls::alloc_btree_map"],[294,"generational_cache::prelude"],[310,"generational_cache::vector"],[317,"generational_cache::vector::impls"],[319,"generational_cache::vector::impls::alloc_vec"],[336,"generational_cache::vector::impls::array"],[364,"core::result"],[365,"core::clone"],[366,"core::cmp"],[367,"core::fmt"],[368,"core::fmt"],[369,"alloc::string"],[370,"core::any"],[371,"core::marker"],[372,"core::default"],[373,"core::cmp"]],"d":["Module providing abstractions for a generational arena …","Module providing abstractions to represent caches.","Module providing generic collections used by this crate.","Module providing abstractions to implement maps.","The <code>generational-cache</code> prelude.","Module providing abstractions for reperesenting vectors.","A generational arena for allocating memory based off a …","Error type associated with arena operations.","An allocation entry in a generational arena.","Free entry pointing to next free entry in the free list.","A generational counter augemented index to track arena …","Used when referencing items in an <code>Arena</code> with an invalid …","An occupied entry containing an allocated value and the …","Used on inserts on a maxed out <code>Arena</code> which is out of …","An unmapped arena entry.","Used when there is an error in the underlying <code>Vector</code> …","","","","","","","","","","Removes all items from this arena and reclaims all …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generation counter.","","","Index to the <code>Vector</code> impl. instance underlying an <code>Arena</code>.","Allocates space for the given items and inserts it into …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reclaims the allocated space for the item at the given …","Reserves space for the given number of additional items in …","","","","","","","","","","","","","","","","Creates an <code>Arena</code> instance with the given <code>Vector</code> …","","","","Block eviction with evicted key/value pair on a key/value …","A size bounded map, where certain existing entries are …","Associated error type.","The outcome of an eviction from a cache.","Cache hit.","The outcome of a lookup query from a <code>Cache</code>.","Cache miss.","No eviction when the cache is not maxed out.","Value eviction on insertion with a key already existing in …","","","","","Returns the current capacity of this cache.","Remove all items from this cache until it’s empty.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Inserts the given key/value pair into this cache.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether this cache is empty.","Returns whether this cache is maxed out.","Returns the number of key/value pairs stored in this cache.","Module providing abstractions to represent an LRUCache.","Queries this cache to find the value associated with given …","Removes the key/value pair associated with the given key …","Reserves additional memory to accomodate the given number …","Removes <code>(self.len() - new_capacity)</code> cache blocks to fit …","","","","","","","","","A cache block containing a key value pair.","Free entry pointing to next free entry in the free list.","A generational-arena powered LRUCache implementation.","Alias representing block entries for storage in a …","Error type associated with <code>LRUCache</code> operations.","Used when there is an error on an operation in the …","Used when attempting to remove elements from the …","Used when there is an error on an operation in the …","Used when the underlying map and list instances contain an …","An occupied entry containing an allocated value and the …","An unmapped arena entry.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the least recently used key/value pair.","","Returns the most recently used key/value pair.","","","","","","","","","","","","","","","","","Creates an <code>LRUCache</code> instance with the given <code>Vector</code> …","Creates an <code>LRUCache</code> instance with the given backing <code>Vector</code> …","","","","Module providing abstractions for a linked list …","Used when there is an error in an operation performed on …","Free entry pointing to next free entry in the free list.","Iterator implementation to iterate over the items in a …","Represents a link to node in the linked list.","Used when a link is not associated with a node in the …","A double-linked linked list implementation powered by a …","Type alias for arena entries corresponding to <code>LinkedList</code> …","Used when attempting to remove items from an empty list.","Error type associated with list operations.","Represents a node in a linked list.","An occupied entry containing an allocated value and the …","An unmapped arena entry.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An abstrct mapping from a set of keys to a set of values.","","","","","","","","","","Module providing a map implementation based on …","A Map implementation based on alloc::collections::BTreeMap.","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Represents an abstract vector over a type accessible as …","","","","","","Module providing a vector implementation based on …","Module provinding a vector implementation based on arrays.","Implements Vector with alloc::vec::Vec.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Implements Vector with <code>[T; N]</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,3,0,6,3,6,3,6,1,8,3,6,1,8,3,6,1,1,8,3,8,3,3,8,3,8,3,6,6,1,8,3,6,8,1,1,8,1,1,8,3,6,1,1,1,1,8,3,6,1,8,3,6,1,8,3,6,1,8,3,6,1,39,40,39,18,0,41,0,19,0,19,18,18,18,19,18,19,41,41,18,19,18,19,18,19,41,18,19,41,41,41,0,41,41,41,41,18,19,18,19,18,19,42,42,0,22,0,0,0,27,27,27,27,22,22,20,25,27,20,25,27,20,20,25,25,20,27,27,20,25,27,20,20,25,27,20,25,20,20,20,20,20,20,20,25,27,20,25,27,20,25,27,20,25,27,25,20,20,39,40,39,0,30,43,0,0,30,0,0,30,0,0,43,43,28,31,23,29,30,28,31,23,29,30,28,28,23,29,23,29,28,29,23,29,23,29,30,30,28,31,23,29,30,28,28,23,28,31,23,29,30,28,31,28,28,28,31,29,28,28,28,28,29,28,28,28,28,28,28,23,29,30,28,31,23,29,30,28,31,23,29,30,28,31,23,29,30,28,29,28,29,39,40,39,24,0,24,24,24,24,0,24,24,24,24,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,4,0,4,4,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,37,36,37,36,37,36,36,36,36,36,37,37,36,37,36,37,36,36,36,36,37,36,37,36,37,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-2,-1]]],2,[],[[4,[[3,[-1]]]]]],[[[1,[-2,-1]]],[[7,[5,6]]],[],[[4,[[3,[-1]]]]]],[8,8],[[[3,[-1]]],[[3,[-1]]],9],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],[[3,[-1]]],[]],[[8,8],10],[[[3,[-1]],[3,[-1]]],10,11],[[8,12],13],[[[3,[-1]],12],13,14],[[[6,[-1]],12],13,14],[[[6,[-1]],12],13,14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[1,[-2,-1]],8],[[15,[-1]]],[],[[4,[[3,[-1]]]]]],[[[1,[-2,-1]],8],[[15,[-1]]],[],[[4,[[3,[-1]]]]]],0,[[[1,[-2,-1]],-1],[[7,[8,6]]],[],[[4,[[3,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-2,-1]]],10,[],[[4,[[3,[-1]]]]]],[[[1,[-2,-1]]],2,[],[[4,[[3,[-1]]]]]],[[[1,[-2,-1]],8],[[15,[-1]]],[],[[4,[[3,[-1]]]]]],[[[1,[-2,-1]],2],[[7,[5,6]]],[],[[4,[[3,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-2,[[1,[-2,-1]]],[],[[4,[[3,[-1]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,2,[]],[-1,[[7,[5]]],[]],[[[18,[-1,-2]],[18,[-1,-2]]],10,11,11],[[[19,[-1]],[19,[-1]]],10,11],[[[18,[-1,-2]],12],13,14,14],[[[19,[-1]],12],13,14],[-1,-1,[]],[-1,-1,[]],[[-1,-2,-3],[[7,[[18,[-2,-3]]]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,10,[]],[-1,10,[]],[-1,2,[]],0,[[-1,-2],[[7,[[19,[-3]]]]],[],[],[]],[[-1,-2],[[7,[[19,[-3]]]]],[],[],[]],[[-1,2],[[7,[5]]],[]],[[-1,2],[[7,[5]]],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[20,[-3,-1,-2,-4]]],2,21,[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]]]],[[[20,[-3,-1,-2,-4]]],[[7,[5]]],21,[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]]]],[[[25,[-1,-2]]],[[25,[-1,-2]]],9,9],[[-1,-2],5,[],[]],[[],[[20,[-3,-1,-2,-4]]],[],[],[[4,[[22,[-1,-2]]]],26],[[24,[-1,23]],26]],[[[27,[-1,-2]],12],13,14,14],[[[27,[-1,-2]],12],13,14,14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[20,[-3,-1,-2,-4]],-1,-2],[[7,[[18,[-1,-2]]]]],21,[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[20,[-3,-1,-2,-4]]],10,21,[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]]]],0,[[[20,[-3,-1,-2,-4]]],[[15,[[5,[-1,-2]]]]],[],[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]]]],[[[20,[-3,-1,-2,-4]]],2,21,[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]]]],[[[20,[-3,-1,-2,-4]]],[[15,[[5,[-1,-2]]]]],[],[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]]]],[[[20,[-3,-1,-2,-4]],-1],[[7,[[19,[-2]]]]],21,[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]]]],[[[20,[-3,-1,-2,-4]],-1],[[7,[[19,[-2]]]]],21,[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]]]],[[[20,[-3,-1,-2,-4]],2],[[7,[5]]],21,[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]]]],[[[20,[-3,-1,-2,-4]],2],[[7,[5]]],21,[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]]]],[-1,-2,[],[]],[-1,16,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],0,[-3,[[20,[-3,-1,-2,-4]]],[],[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]],26]],[[-3,-4],[[20,[-3,-1,-2,-4]]],[],[],[[4,[[22,[-1,-2]]]]],[[24,[-1,23]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[28,[-2,-1]]],2,[],[[4,[[3,[[29,[-1]]]]]]]],[[[28,[-2,-1]]],[[7,[5,30]]],[],[[4,[[3,[[29,[-1]]]]]]]],[23,23],[[[29,[-1]]],[[29,[-1]]],9],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],[[28,[-2,-1]]],[],[26,[4,[[3,[[29,[-1]]]]]]]],[[],[[29,[-1]]],26],[[23,23],10],[[[29,[-1]],[29,[-1]]],10,11],[[23,12],13],[[[29,[-1]],12],13,14],[[[30,[-1]],12],13,14],[[[30,[-1]],12],13,14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[28,[-2,-1]],23],[[15,[-1]]],[],[[4,[[3,[[29,[-1]]]]]]]],[[[28,[-2,-1]],23],[[15,[-1]]],[],[[4,[[3,[[29,[-1]]]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[28,[-2,-1]]],[],[],[[4,[[3,[[29,[-1]]]]]]]],[-1,-2,[],[]],[[[28,[-2,-1]]],10,[],[[4,[[3,[[29,[-1]]]]]]]],[[[28,[-2,-1]]],[[31,[-2,-1]]],[],[[4,[[3,[[29,[-1]]]]]]]],[[[28,[-2,-1]]],2,[],[[4,[[3,[[29,[-1]]]]]]]],[[[31,[-2,-1]]],15,[],[[4,[[3,[[29,[-1]]]]]]]],0,[[[28,[-2,-1]]],[[15,[-1]]],[],[[4,[[3,[[29,[-1]]]]]]]],[[[28,[-2,-1]]],[[15,[-1]]],[],[[4,[[3,[[29,[-1]]]]]]]],[[[28,[-2,-1]]],[[15,[-1]]],[],[[4,[[3,[[29,[-1]]]]]]]],[[[28,[-2,-1]]],[[15,[-1]]],[],[[4,[[3,[[29,[-1]]]]]]]],0,[[[28,[-2,-1]],-1],[[7,[23,30]]],[],[[4,[[3,[[29,[-1]]]]]]]],[[[28,[-2,-1]],-1],[[7,[23,30]]],[],[[4,[[3,[[29,[-1]]]]]]]],[[[28,[-2,-1]],23],[[15,[-1]]],[],[[4,[[3,[[29,[-1]]]]]]]],[[[28,[-2,-1]],2],[[7,[5,30]]],[],[[4,[[3,[[29,[-1]]]]]]]],[[[28,[-2,-1]],23],[[15,[5]]],[],[[4,[[3,[[29,[-1]]]]]]]],[[[28,[-2,-1]],23],[[15,[5]]],[],[[4,[[3,[[29,[-1]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,16,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[[[28,[-2,-1]],23],[[15,[23]]],[],[[4,[[3,[[29,[-1]]]]]]]],0,[-2,[[28,[-2,-1]]],[],[[4,[[3,[[29,[-1]]]]]]]],[-1,[[29,[-1]]],[]],0,0,0,0,0,[-1,[[15,[2]]],[]],[-1,[[7,[5]]],[]],[[-1,-2],[[15,[-3]]],[],[],[]],[[-1,-2],[[15,[-3]]],[],[],[]],0,[[-1,-2,-3],[[7,[[15,[-3]]]]],[],[],[]],[-1,10,[]],[-1,2,[]],[[-1,-2],[[15,[-3]]],[],[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[32,[-1,-2]]],[[15,[2]]],33,[]],[[[32,[-1,-2]]],[[7,[5]]],33,[]],[[],[[32,[-1,-2]]],[],[]],[-1,-1,[]],[[[32,[-1,-2]],-1],[[15,[-2]]],33,[]],[[[32,[-1,-2]],-1],[[15,[-2]]],33,[]],[[[32,[-1,-2]],-1,-2],[[7,[[15,[-2]]]]],33,[]],[-1,-2,[],[]],[[[32,[-1,-2]]],10,33,[]],[[[32,[-1,-2]]],2,33,[]],[[],[[32,[-1,-2]]],[],[]],[[[32,[-1,-2]],-1],[[15,[-2]]],33,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[[[34,[-1,-2]]],[[32,[-1,-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,2,[]],[-1,5,[]],0,[[-1,-2],[[7,[5]]],[],[]],[[-1,2],[[7,[5]]],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1]]],2,[]],[[[35,[-1]]],5,[]],[[],[[35,[-1]]],[]],[[[35,[-1]]],[],[]],[[[35,[-1]]],[],[]],[-1,-1,[]],[-1,-2,[],[]],[[],[[35,[-1]]],[]],[[[35,[-1]],-1],[[7,[5]]],[]],[[[35,[-1]],2],[[7,[5]]],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[2,[[35,[-1]]],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[36,[-1]]],2,[]],[[[36,[-1]]],5,[]],[[],[[36,[-1]]],[21,26]],[[[36,[-1]]],[],[]],[[[36,[-1]]],[],[]],[[37,37],10],[[37,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[36,[-1]]],[21,26]],[[[36,[-1]],-1],[[7,[5]]],[]],[[[36,[-1]],2],[[7,[5]]],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[[[38,[-1]]],[[36,[-1]]],[]]],"c":[],"p":[[3,"Arena",6],[15,"usize"],[4,"Entry",6],[8,"Vector",310],[15,"tuple"],[4,"ArenaError",6],[4,"Result",364],[3,"Index",6],[8,"Clone",365],[15,"bool"],[8,"PartialEq",366],[3,"Formatter",367],[6,"Result",367],[8,"Debug",367],[4,"Option",368],[3,"String",369],[3,"TypeId",370],[4,"Eviction",73],[4,"Lookup",73],[3,"LRUCache",113],[8,"Copy",371],[6,"LRUCacheBlockArenaEntry",113],[3,"Link",171],[8,"Map",263],[3,"Block",113],[8,"Default",372],[4,"LRUCacheError",113],[3,"LinkedList",171],[3,"Node",171],[4,"ListError",171],[3,"Iter",171],[3,"AllocBTreeMap",275],[8,"Ord",366],[3,"BTreeMap",373],[3,"AllocVec",319],[3,"Array",336],[4,"ArrayError",336],[15,"array"],[13,"Occupied",260],[13,"Free",260],[8,"Cache",73],[13,"Block",111],[6,"LinkedListArenaEntry",171]],"b":[[35,"impl-Debug-for-ArenaError%3CVE%3E"],[36,"impl-Display-for-ArenaError%3CVE%3E"],[135,"impl-Debug-for-LRUCacheError%3CVE,+ME%3E"],[136,"impl-Display-for-LRUCacheError%3CVE,+ME%3E"],[205,"impl-Display-for-ListError%3CVE%3E"],[206,"impl-Debug-for-ListError%3CVE%3E"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
