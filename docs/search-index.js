var searchIndex = JSON.parse('{\
"generational_cache":{"doc":"Usage","t":"AAAAAADEENDNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMMNIQENENNNLLLLKKLLLLLLKLLLLKAKKKKLLLLLLMMDDGENNNNLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMLLANDDNDGNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLQIKKKKAKKKKADLLLLLLLLLLLLLLLLLLCCCCCCCCCCCCCCCCQIKKAKKAADLLLLLLLLLLLLLLLLDENLLLLLLLLLLLLLLLLLLLLLLLLL","n":["arena","cache","collections","map","prelude","vector","Arena","ArenaError","Entry","Free","Index","InvalidIdx","Occupied","OutOfMemory","Unmapped","VectorError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","generation","get","get_mut","idx","insert","into","into","into","into","is_empty","len","remove","reserve","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_vector","generation","next_free_idx","value","Block","Cache","Error","Eviction","Hit","Lookup","Miss","None","Value","borrow","borrow","borrow_mut","borrow_mut","capacity","clear","eq","eq","fmt","fmt","from","from","insert","into","into","is_empty","is_maxed","len","lru_cache","query","remove","reserve","shrink","try_from","try_from","try_into","try_into","type_id","type_id","key","value","Block","LRUCache","LRUCacheBlockArenaEntry","LRUCacheError","ListError","ListUnderflow","MapError","MapListInconsistent","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","default","fmt","fmt","from","from","from","insert","into","into","into","is_empty","key","least_recent","len","most_recent","query","remove","reserve","shrink","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","with_backing_vector","with_backing_vector_and_map","list","ArenaError","Iter","Link","LinkBroken","LinkedList","LinkedListArenaEntry","ListEmpty","ListError","Node","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","get","get_mut","index","into","into","into","into","into","into_iter","into_iter","is_empty","iter","len","next","next","peek_back","peek_front","pop_back","pop_front","prev","push_back","push_front","remove","reserve","shift_push_back","shift_push_front","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unlink","value","with_backing_vector","with_value","Error","Map","capacity","clear","get","get_mut","impls","insert","is_empty","len","remove","alloc_btree_map","AllocBTreeMap","borrow","borrow_mut","capacity","clear","default","from","get","get_mut","insert","into","is_empty","len","new","remove","try_from","try_into","type_id","with_btree_map","AllocBTreeMap","AllocVec","Arena","ArenaError","Array","ArrayError","Cache","Eviction","LRUCache","LRUCacheError","Link","LinkedList","ListError","Lookup","Map","Vector","Error","Vector","capacity","clear","impls","push","reserve","alloc_vec","array","AllocVec","borrow","borrow_mut","capacity","clear","default","deref","deref_mut","from","into","new","push","reserve","try_from","try_into","type_id","with_capacity","Array","ArrayError","OutOfMemory","borrow","borrow","borrow_mut","borrow_mut","capacity","clear","default","deref","deref_mut","eq","fmt","from","from","into","into","new","push","reserve","try_from","try_from","try_into","try_into","type_id","type_id","with_buffer"],"q":[[0,"generational_cache"],[6,"generational_cache::arena"],[70,"generational_cache::arena::Entry"],[73,"generational_cache::cache"],[111,"generational_cache::cache::Eviction"],[113,"generational_cache::cache::lru_cache"],[164,"generational_cache::collections"],[165,"generational_cache::collections::list"],[251,"generational_cache::map"],[262,"generational_cache::map::impls"],[263,"generational_cache::map::impls::alloc_btree_map"],[282,"generational_cache::prelude"],[298,"generational_cache::vector"],[305,"generational_cache::vector::impls"],[307,"generational_cache::vector::impls::alloc_vec"],[324,"generational_cache::vector::impls::array"]],"d":["Module providing abstractions for a generational arena …","Module providing abstractions to represent caches.","Module providing generic collections used by this crate.","Module providing abstractions to implement maps.","","Module providing abstractions for reperesenting vectors.","A generational arena for allocating memory based off a …","","An allocation entry in a generational arena.","","An generational counter augemented index to track entries.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","A size bounded map, where certain existing entries are …","","An evicted value from cache.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Module providing abstractions to represent an LRUCache.","","","","","","","","","","","","","A cache block containing a key value pair.","A generational-arena powered LRUCache implementation.","Alias representing block entries for storage in a …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Module providing abstractions for a linked list …","","","Represents a link to node in the linked list.","","A double-linked linked list implementation powered by a …","","","","Represents a node in a linked list.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An abstrct mapping from a set of keys to a set of values.","","","","","","","","","","Module providing a map implementation based on …","A Map implementation based on alloc::collections::BTreeMap.","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Represents an abstract vector over a type accessible as …","","","","","","Module providing a vector implementation based on …","Module provinding a vector implementation based on arrays.","Implements Vector with alloc::vec::Vec.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Implements Vector with <code>[T; N]</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,0,5,1,5,1,5,3,7,1,5,3,7,1,5,3,3,7,1,7,1,1,7,1,7,1,5,5,3,7,1,5,7,3,3,7,3,3,7,1,5,3,3,3,3,7,1,5,3,7,1,5,3,7,1,5,3,7,1,5,3,38,39,38,17,0,40,0,18,0,18,17,17,17,18,17,18,40,40,17,18,17,18,17,18,40,17,18,40,40,40,0,40,40,40,40,17,18,17,18,17,18,41,41,0,0,0,0,26,26,26,26,23,24,26,23,24,26,23,23,24,24,23,26,26,23,24,26,23,23,24,26,23,24,23,23,23,23,23,23,23,24,26,23,24,26,23,24,26,23,24,26,24,23,23,0,29,0,0,29,0,0,29,0,0,28,30,21,27,29,28,30,21,27,29,28,28,21,27,21,27,28,27,21,27,21,27,29,29,28,30,21,27,29,28,28,21,28,30,21,27,29,28,30,28,28,28,30,27,28,28,28,28,27,28,28,28,28,28,28,21,27,29,28,30,21,27,29,28,30,21,27,29,28,30,21,27,29,28,27,28,27,22,0,22,22,22,22,0,22,22,22,22,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,0,2,2,0,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,36,35,36,35,36,35,35,35,35,35,36,36,35,36,35,36,35,35,35,35,36,35,36,35,36,35],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[2,[1]]]]],4],[[[3,[[2,[1]]]]],[[6,[5]]]],[7,7],[[[1,[8]]],[[1,[8]]]],[[]],[[]],[[],1],[[7,7],9],[[[1,[10]],[1,[10]]],9],[[7,11],12],[[[1,[13]],11],12],[[[5,[13]],11],12],[[[5,[13]],11],12],[[]],[[]],[[]],[[]],0,[[[3,[[2,[1]]]],7],14],[[[3,[[2,[1]]]],7],14],0,[[[3,[[2,[1]]]]],[[6,[7,5]]]],[[]],[[]],[[]],[[]],[[[3,[[2,[1]]]]],9],[[[3,[[2,[1]]]]],4],[[[3,[[2,[1]]]],7],14],[[[3,[[2,[1]]]],4],[[6,[5]]]],[[]],[[]],[[],15],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],16],[[],16],[[],16],[[],16],[[[2,[1]]],[[3,[[2,[1]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],4],[[],6],[[[17,[10,10]],[17,[10,10]]],9],[[[18,[10]],[18,[10]]],9],[[[17,[13,13]],11],12],[[[18,[13]],11],12],[[]],[[]],[[],[[6,[17]]]],[[]],[[]],[[],9],[[],9],[[],4],0,[[],[[6,[18]]]],[[],[[6,[18]]]],[4,6],[4,6],[[],6],[[],6],[[],6],[[],6],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[[2,[[20,[19]]]],19,[22,[19,21]]]]],4],[[[23,[[2,[[20,[19]]]],19,[22,[19,21]]]]],6],[[[24,[8,8]]],[[24,[8,8]]]],[[]],[[],[[23,[[0,[[2,[20]],25]],[0,[[22,[21]],25]]]]]],[[[26,[13,13]],11],12],[[[26,[13,13]],11],12],[[]],[[]],[[]],[[[23,[[2,[[20,[19]]]],19,[22,[19,21]]]],19],[[6,[[17,[19]]]]]],[[]],[[]],[[]],[[[23,[[2,[[20,[19]]]],19,[22,[19,21]]]]],9],0,[[[23,[[2,[20]],[22,[21]]]]],14],[[[23,[[2,[[20,[19]]]],19,[22,[19,21]]]]],4],[[[23,[[2,[20]],[22,[21]]]]],14],[[[23,[[2,[[20,[19]]]],19,[22,[19,21]]]],19],[[6,[18]]]],[[[23,[[2,[[20,[19]]]],19,[22,[19,21]]]],19],[[6,[18]]]],[[[23,[[2,[[20,[19]]]],19,[22,[19,21]]]],4],6],[[[23,[[2,[[20,[19]]]],19,[22,[19,21]]]],4],6],[[]],[[],15],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],16],[[],16],[[],16],0,[[[2,[20]]],[[23,[[2,[20]],[0,[[22,[21]],25]]]]]],[[[2,[20]],[22,[21]]],[[23,[[2,[20]],[22,[21]]]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[28,[[2,[[1,[27]]]]]]],4],[[[28,[[2,[[1,[27]]]]]]],[[6,[29]]]],[21,21],[[[27,[8]]],[[27,[8]]]],[[]],[[]],[[],[[28,[[0,[25,[2,[[1,[27]]]]]]]]]],[[],[[27,[25]]]],[[21,21],9],[[[27,[10]],[27,[10]]],9],[[21,11],12],[[[27,[13]],11],12],[[[29,[13]],11],12],[[[29,[13]],11],12],[[]],[[]],[[]],[[]],[[]],[[[28,[[2,[[1,[27]]]]]],21],14],[[[28,[[2,[[1,[27]]]]]],21],14],0,[[]],[[]],[[]],[[]],[[]],[[[28,[[2,[[1,[27]]]]]]]],[[]],[[[28,[[2,[[1,[27]]]]]]],9],[[[28,[[2,[[1,[27]]]]]]],[[30,[[2,[[1,[27]]]]]]]],[[[28,[[2,[[1,[27]]]]]]],4],[[[30,[[2,[[1,[27]]]]]]],14],0,[[[28,[[2,[[1,[27]]]]]]],14],[[[28,[[2,[[1,[27]]]]]]],14],[[[28,[[2,[[1,[27]]]]]]],14],[[[28,[[2,[[1,[27]]]]]]],14],0,[[[28,[[2,[[1,[27]]]]]]],[[6,[21,29]]]],[[[28,[[2,[[1,[27]]]]]]],[[6,[21,29]]]],[[[28,[[2,[[1,[27]]]]]],21],14],[[[28,[[2,[[1,[27]]]]]],4],[[6,[29]]]],[[[28,[[2,[[1,[27]]]]]],21],14],[[[28,[[2,[[1,[27]]]]]],21],14],[[]],[[]],[[],15],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],16],[[],16],[[],16],[[],16],[[],16],[[[28,[[2,[[1,[27]]]]]],21],[[14,[21]]]],0,[[[2,[[1,[27]]]]],[[28,[[2,[[1,[27]]]]]]]],[[],27],0,0,[[],[[14,[4]]]],[[],6],[[],14],[[],14],0,[[],[[6,[14]]]],[[],9],[[],4],[[],14],0,0,[[]],[[]],[[[32,[31]]],[[14,[4]]]],[[[32,[31]]],6],[[],32],[[]],[[[32,[31]],31],14],[[[32,[31]],31],14],[[[32,[31]],31],[[6,[14]]]],[[]],[[[32,[31]]],9],[[[32,[31]]],4],[[],32],[[[32,[31]],31],14],[[],6],[[],6],[[],16],[33,32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[[]],0,[[],6],[4,6],0,0,0,[[]],[[]],[34,4],[34],[[],34],[34],[34],[[]],[[]],[[],34],[34,6],[[34,4],6],[[],6],[[],6],[[],16],[4,34],0,0,0,[[]],[[]],[[]],[[]],[35,4],[35],[[],[[35,[[0,[19,25]]]]]],[35],[35],[[36,36],9],[[36,11],12],[[]],[[]],[[]],[[]],[[],[[35,[[0,[19,25]]]]]],[35,6],[[35,4],6],[[],6],[[],6],[[],6],[[],6],[[],16],[[],16],[37,35]],"c":[],"p":[[4,"Entry"],[8,"Vector"],[3,"Arena"],[15,"usize"],[4,"ArenaError"],[4,"Result"],[3,"Index"],[8,"Clone"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"Option"],[3,"String"],[3,"TypeId"],[4,"Eviction"],[4,"Lookup"],[8,"Copy"],[6,"LRUCacheBlockArenaEntry"],[3,"Link"],[8,"Map"],[3,"LRUCache"],[3,"Block"],[8,"Default"],[4,"LRUCacheError"],[3,"Node"],[3,"LinkedList"],[4,"ListError"],[3,"Iter"],[8,"Ord"],[3,"AllocBTreeMap"],[3,"BTreeMap"],[3,"AllocVec"],[3,"Array"],[4,"ArrayError"],[15,"array"],[13,"Occupied"],[13,"Free"],[8,"Cache"],[13,"Block"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
