var searchIndex = JSON.parse('{\
"generational_cache":{"doc":"Usage","t":"AAAAAADEENDNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLMMMNIQENNLLKKLLLKLLLKAKKLLLMMDNDGENNNNLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLANDDNDGNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMLLQIKKKKAKKKKADLLLLLLLLLLLLLLLLLLCCCCCCCCCCCCQIKKAKAADLLLLLLLLLLLLLLLDENLLLLLLLLLLLLLLLLLLLLLLLL","n":["arena","cache","collections","map","prelude","vector","Arena","ArenaError","Entry","Free","Index","InvalidIdx","Occupied","OutOfMemory","Unmapped","VectorError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","generation","get","get_mut","idx","insert","into","into","into","into","is_empty","len","remove","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_vector","generation","next_free_idx","value","Block","Cache","Error","Eviction","None","Value","borrow","borrow_mut","capacity","clear","eq","fmt","from","insert","into","is_empty","is_maxed","len","lru_cache","query","remove","try_from","try_into","type_id","key","value","Block","CacheMiss","LRUCache","LRUCacheBlockArenaEntry","LRUCacheError","ListError","ListUnderflow","MapError","MapListInconsistent","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","default","fmt","fmt","from","from","from","insert","into","into","into","is_empty","key","least_recent","len","most_recent","query","remove","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","with_backing_vector","with_backing_vector_and_map","list","ArenaError","Iter","Link","LinkBroken","LinkedList","LinkedListArenaEntry","ListEmpty","ListError","Node","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","get","get_mut","index","into","into","into","into","into","into_iter","into_iter","is_empty","iter","len","next","next","peek_back","peek_front","pop_back","pop_front","prev","push_back","push_front","remove","shift_push_back","shift_push_front","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unlink","value","with_backing_vector","with_value","Error","Map","capacity","clear","get","get_mut","impls","insert","is_empty","len","remove","alloc_btree_map","AllocBTreeMap","borrow","borrow_mut","capacity","clear","default","from","get","get_mut","insert","into","is_empty","len","new","remove","try_from","try_into","type_id","with_btree_map","AllocBTreeMap","AllocVec","Array","Cache","Eviction","LRUCache","LRUCacheError","Link","LinkedList","ListError","Map","Vector","Error","Vector","capacity","clear","impls","push","alloc_vec","array","AllocVec","borrow","borrow_mut","capacity","clear","default","deref","deref_mut","from","into","new","push","try_from","try_into","type_id","with_capacity","Array","ArrayError","OutOfMemory","borrow","borrow","borrow_mut","borrow_mut","capacity","clear","default","deref","deref_mut","eq","fmt","from","from","into","into","new","push","try_from","try_from","try_into","try_into","type_id","type_id","with_buffer"],"q":[[0,"generational_cache"],[6,"generational_cache::arena"],[69,"generational_cache::arena::Entry"],[72,"generational_cache::cache"],[96,"generational_cache::cache::Eviction"],[98,"generational_cache::cache::lru_cache"],[148,"generational_cache::collections"],[149,"generational_cache::collections::list"],[234,"generational_cache::map"],[245,"generational_cache::map::impls"],[246,"generational_cache::map::impls::alloc_btree_map"],[265,"generational_cache::prelude"],[277,"generational_cache::vector"],[283,"generational_cache::vector::impls"],[285,"generational_cache::vector::impls::alloc_vec"],[301,"generational_cache::vector::impls::array"]],"d":["Module providing abstractions for a generational arena …","Module providing abstractions to represent caches.","Module providing generic collections used by this crate.","Module providing abstractions to implement maps.","","Module providing abstractions for reperesenting vectors.","","","An allocation entry in a generational arena.","","An generational counter augemented index to track entries.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","A size bounded map, where certain existing entries are …","","An evicted value from cache.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","Module providing abstractions to represent an LRUCache.","","","","","","","","A cache block containing a key value pair.","","A generational-cache powered LRUCache implementation.","Alias representing block entries for storage in a …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Module providing abstractions for a linked list …","","","Represents a link to node in the linked list.","","A double-linked linked list implementation powered by a …","","","","Represents a node in a linked list.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An abstrct mapping from a set of keys to a set of values.","","","","","","","","","","Module providing a map implementation based on …","A Map implementation based on alloc::collections::BTreeMap.","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Represents an abstract vector over a type accessible as …","","","","","Module providing a vector implementation based on …","Module provinding a vector implementation based on arrays.","Implements Vector with alloc::vec::Vec.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Implements Vector with <code>[T; N]</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,0,5,1,5,1,5,3,7,1,5,3,7,1,5,3,3,7,1,7,1,1,7,1,7,1,5,5,3,7,1,5,7,3,3,7,3,3,7,1,5,3,3,3,7,1,5,3,7,1,5,3,7,1,5,3,7,1,5,3,37,38,37,17,0,39,0,17,17,17,17,39,39,17,17,17,39,17,39,39,39,0,39,39,17,17,17,40,40,0,25,0,0,0,25,25,25,25,22,23,25,22,23,25,22,22,23,23,22,25,25,22,23,25,22,22,23,25,22,23,22,22,22,22,22,23,25,22,23,25,22,23,25,22,23,25,23,22,22,0,28,0,0,28,0,0,28,0,0,27,29,20,26,28,27,29,20,26,28,27,27,20,26,20,26,27,26,20,26,20,26,28,28,27,29,20,26,28,27,27,20,27,29,20,26,28,27,29,27,27,27,29,26,27,27,27,27,26,27,27,27,27,27,20,26,28,27,29,20,26,28,27,29,20,26,28,27,29,20,26,28,27,26,27,26,21,0,21,21,21,21,0,21,21,21,21,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,0,2,0,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,35,34,35,34,35,34,34,34,34,34,35,35,34,35,34,35,34,34,34,35,34,35,34,35,34],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[2,[1]]]]],4],[[[3,[[2,[1]]]]],[[6,[5]]]],[7,7],[[[1,[8]]],[[1,[8]]]],[[]],[[]],[[],1],[[7,7],9],[[[1,[10]],[1,[10]]],9],[[7,11],12],[[[1,[13]],11],12],[[[5,[13]],11],12],[[[5,[13]],11],12],[[]],[[]],[[]],[[]],0,[[[3,[[2,[1]]]],7],14],[[[3,[[2,[1]]]],7],14],0,[[[3,[[2,[1]]]]],[[6,[7,5]]]],[[]],[[]],[[]],[[]],[[[3,[[2,[1]]]]],9],[[[3,[[2,[1]]]]],4],[[[3,[[2,[1]]]],7],14],[[]],[[]],[[],15],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],16],[[],16],[[],16],[[],16],[[[2,[1]]],[[3,[[2,[1]]]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[],4],[[],6],[[[17,[10,10]],[17,[10,10]]],9],[[[17,[13,13]],11],12],[[]],[[],[[6,[17]]]],[[]],[[],9],[[],9],[[],4],0,[[],6],[[],6],[[],6],[[],6],[[],16],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[22,[[2,[[19,[18]]]],18,[21,[18,20]]]]],4],[[[22,[[2,[[19,[18]]]],18,[21,[18,20]]]]],6],[[[23,[8,8]]],[[23,[8,8]]]],[[]],[[],[[22,[[0,[[2,[19]],24]],[0,[[21,[20]],24]]]]]],[[[25,[13,13]],11],12],[[[25,[13,13]],11],12],[[]],[[]],[[]],[[[22,[[2,[[19,[18]]]],18,[21,[18,20]]]],18],[[6,[[17,[18]]]]]],[[]],[[]],[[]],[[[22,[[2,[[19,[18]]]],18,[21,[18,20]]]]],9],0,[[[22,[[2,[19]],[21,[20]]]]],14],[[[22,[[2,[[19,[18]]]],18,[21,[18,20]]]]],4],[[[22,[[2,[19]],[21,[20]]]]],14],[[[22,[[2,[[19,[18]]]],18,[21,[18,20]]]],18],6],[[[22,[[2,[[19,[18]]]],18,[21,[18,20]]]],18],6],[[]],[[],15],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],16],[[],16],[[],16],0,[[[2,[19]]],[[22,[[2,[19]],[0,[[21,[20]],24]]]]]],[[[2,[19]],[21,[20]]],[[22,[[2,[19]],[21,[20]]]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[27,[[2,[[1,[26]]]]]]],4],[[[27,[[2,[[1,[26]]]]]]],[[6,[28]]]],[20,20],[[[26,[8]]],[[26,[8]]]],[[]],[[]],[[],[[27,[[0,[24,[2,[[1,[26]]]]]]]]]],[[],[[26,[24]]]],[[20,20],9],[[[26,[10]],[26,[10]]],9],[[20,11],12],[[[26,[13]],11],12],[[[28,[13]],11],12],[[[28,[13]],11],12],[[]],[[]],[[]],[[]],[[]],[[[27,[[2,[[1,[26]]]]]],20],14],[[[27,[[2,[[1,[26]]]]]],20],14],0,[[]],[[]],[[]],[[]],[[]],[[[27,[[2,[[1,[26]]]]]]]],[[]],[[[27,[[2,[[1,[26]]]]]]],9],[[[27,[[2,[[1,[26]]]]]]],[[29,[[2,[[1,[26]]]]]]]],[[[27,[[2,[[1,[26]]]]]]],4],[[[29,[[2,[[1,[26]]]]]]],14],0,[[[27,[[2,[[1,[26]]]]]]],14],[[[27,[[2,[[1,[26]]]]]]],14],[[[27,[[2,[[1,[26]]]]]]],14],[[[27,[[2,[[1,[26]]]]]]],14],0,[[[27,[[2,[[1,[26]]]]]]],[[6,[20,28]]]],[[[27,[[2,[[1,[26]]]]]]],[[6,[20,28]]]],[[[27,[[2,[[1,[26]]]]]],20],14],[[[27,[[2,[[1,[26]]]]]],20],14],[[[27,[[2,[[1,[26]]]]]],20],14],[[]],[[]],[[],15],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],16],[[],16],[[],16],[[],16],[[],16],[[[27,[[2,[[1,[26]]]]]],20],[[14,[20]]]],0,[[[2,[[1,[26]]]]],[[27,[[2,[[1,[26]]]]]]]],[[],26],0,0,[[],[[14,[4]]]],[[],6],[[],14],[[],14],0,[[],[[6,[14]]]],[[],9],[[],4],[[],14],0,0,[[]],[[]],[[[31,[30]]],[[14,[4]]]],[[[31,[30]]],6],[[],31],[[]],[[[31,[30]],30],14],[[[31,[30]],30],14],[[[31,[30]],30],[[6,[14]]]],[[]],[[[31,[30]]],9],[[[31,[30]]],4],[[],31],[[[31,[30]],30],14],[[],6],[[],6],[[],16],[32,31],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[[]],0,[[],6],0,0,0,[[]],[[]],[33,4],[33],[[],33],[33],[33],[[]],[[]],[[],33],[33,6],[[],6],[[],6],[[],16],[4,33],0,0,0,[[]],[[]],[[]],[[]],[34,4],[34],[[],[[34,[[0,[18,24]]]]]],[34],[34],[[35,35],9],[[35,11],12],[[]],[[]],[[]],[[]],[[],[[34,[[0,[18,24]]]]]],[34,6],[[],6],[[],6],[[],6],[[],6],[[],16],[[],16],[36,34]],"c":[],"p":[[4,"Entry"],[8,"Vector"],[3,"Arena"],[15,"usize"],[4,"ArenaError"],[4,"Result"],[3,"Index"],[8,"Clone"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"Option"],[3,"String"],[3,"TypeId"],[4,"Eviction"],[8,"Copy"],[6,"LRUCacheBlockArenaEntry"],[3,"Link"],[8,"Map"],[3,"LRUCache"],[3,"Block"],[8,"Default"],[4,"LRUCacheError"],[3,"Node"],[3,"LinkedList"],[4,"ListError"],[3,"Iter"],[8,"Ord"],[3,"AllocBTreeMap"],[3,"BTreeMap"],[3,"AllocVec"],[3,"Array"],[4,"ArrayError"],[15,"array"],[13,"Occupied"],[13,"Free"],[8,"Cache"],[13,"Block"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
